// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { GetUsersApiV1UsersGetData, GetUsersApiV1UsersGetResponse, CreateUserApiV1UsersPostData, CreateUserApiV1UsersPostResponse, CreateUserApiV1UsersPostError, DeleteUserApiV1UsersUserIdDeleteData, DeleteUserApiV1UsersUserIdDeleteResponse, DeleteUserApiV1UsersUserIdDeleteError, GetUserApiV1UsersUserIdGetData, GetUserApiV1UsersUserIdGetResponse, GetUserApiV1UsersUserIdGetError, UpdateUserApiV1UsersUserIdPutData, UpdateUserApiV1UsersUserIdPutResponse, UpdateUserApiV1UsersUserIdPutError, RegisterUserAuthUsersPostData, RegisterUserAuthUsersPostError, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostError, ReadUsersMeAuthUsersMeGetData, RootHealthzGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Users
 */
export const getUsersApiV1UsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersApiV1UsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiV1UsersGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/users',
        ...options
    });
};

/**
 * Create User
 */
export const createUserApiV1UsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserApiV1UsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserApiV1UsersPostResponse, CreateUserApiV1UsersPostError, ThrowOnError>({
        url: '/api/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User
 */
export const deleteUserApiV1UsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserApiV1UsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserApiV1UsersUserIdDeleteResponse, DeleteUserApiV1UsersUserIdDeleteError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Get User
 */
export const getUserApiV1UsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserApiV1UsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserApiV1UsersUserIdGetResponse, GetUserApiV1UsersUserIdGetError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 */
export const updateUserApiV1UsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserApiV1UsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserApiV1UsersUserIdPutResponse, UpdateUserApiV1UsersUserIdPutError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register User
 */
export const registerUserAuthUsersPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserAuthUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RegisterUserAuthUsersPostError, ThrowOnError>({
        url: '/auth/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenAuthTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, LoginForAccessTokenAuthTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Read Users Me
 */
export const readUsersMeAuthUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeAuthUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/users/me',
        ...options
    });
};

/**
 * Root
 */
export const rootHealthzGet = <ThrowOnError extends boolean = false>(options?: Options<RootHealthzGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/healthz',
        ...options
    });
};