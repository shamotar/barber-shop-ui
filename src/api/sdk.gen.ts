// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { GetUsersApiV1UsersGetData, GetUsersApiV1UsersGetResponse, GetUsersApiV1UsersGetError, CreateUserApiV1UsersPostData, CreateUserApiV1UsersPostResponse, CreateUserApiV1UsersPostError, DeleteUserApiV1UsersUserIdDeleteData, DeleteUserApiV1UsersUserIdDeleteResponse, DeleteUserApiV1UsersUserIdDeleteError, GetUserApiV1UsersUserIdGetData, GetUserApiV1UsersUserIdGetResponse, GetUserApiV1UsersUserIdGetError, UpdateUserApiV1UsersUserIdPutData, UpdateUserApiV1UsersUserIdPutResponse, UpdateUserApiV1UsersUserIdPutError, GetAllBarbersApiV1BarbersGetData, GetAllBarbersApiV1BarbersGetResponse, GetAllBarbersApiV1BarbersGetError, CreateBarberApiV1BarbersPostData, CreateBarberApiV1BarbersPostResponse, CreateBarberApiV1BarbersPostError, GetBarberByIdApiV1BarbersBarberIdGetData, GetBarberByIdApiV1BarbersBarberIdGetResponse, GetBarberByIdApiV1BarbersBarberIdGetError, GetAllServicesApiV1ServicesGetData, GetAllServicesApiV1ServicesGetResponse, GetAllServicesApiV1ServicesGetError, CreateServiceApiV1ServicesPostData, CreateServiceApiV1ServicesPostResponse, CreateServiceApiV1ServicesPostError, DeleteServiceApiV1ServicesServiceIdDeleteData, DeleteServiceApiV1ServicesServiceIdDeleteResponse, DeleteServiceApiV1ServicesServiceIdDeleteError, UpdateServiceApiV1ServicesServiceIdPutData, UpdateServiceApiV1ServicesServiceIdPutResponse, UpdateServiceApiV1ServicesServiceIdPutError, GetSchedulesApiV1SchedulesGetData, GetSchedulesApiV1SchedulesGetResponse, GetSchedulesApiV1SchedulesGetError, CreateScheduleApiV1SchedulesPostData, CreateScheduleApiV1SchedulesPostResponse, CreateScheduleApiV1SchedulesPostError, DeleteScheduleApiV1SchedulesScheduleIdDeleteData, DeleteScheduleApiV1SchedulesScheduleIdDeleteResponse, DeleteScheduleApiV1SchedulesScheduleIdDeleteError, GetScheduleApiV1SchedulesScheduleIdGetData, GetScheduleApiV1SchedulesScheduleIdGetResponse, GetScheduleApiV1SchedulesScheduleIdGetError, UpdateScheduleApiV1SchedulesScheduleIdPutData, UpdateScheduleApiV1SchedulesScheduleIdPutResponse, UpdateScheduleApiV1SchedulesScheduleIdPutError, GetAppointmentsApiV1AppointmentsGetData, GetAppointmentsApiV1AppointmentsGetResponse, GetAppointmentsApiV1AppointmentsGetError, CreateAppointmentApiV1AppointmentsPostData, CreateAppointmentApiV1AppointmentsPostResponse, CreateAppointmentApiV1AppointmentsPostError, DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteData, DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteResponse, DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteError, GetAppointmentApiV1AppointmentsAppointmentIdGetData, GetAppointmentApiV1AppointmentsAppointmentIdGetResponse, GetAppointmentApiV1AppointmentsAppointmentIdGetError, UpdateAppointmentApiV1AppointmentsAppointmentIdPutData, UpdateAppointmentApiV1AppointmentsAppointmentIdPutResponse, UpdateAppointmentApiV1AppointmentsAppointmentIdPutError, ReadRootGetData, LoginLoginPostData, LoginLoginPostResponse, LoginLoginPostError, ProtectedEndpointProtectedGetData, ProtectedEndpointProtectedGetResponse, BarberProtectedBarberProtectedGetData, BarberProtectedBarberProtectedGetResponse, RootHealthzGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Users
 */
export const getUsersApiV1UsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersApiV1UsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiV1UsersGetResponse, GetUsersApiV1UsersGetError, ThrowOnError>({
        url: '/api/v1/users',
        ...options
    });
};

/**
 * Create User
 */
export const createUserApiV1UsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserApiV1UsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserApiV1UsersPostResponse, CreateUserApiV1UsersPostError, ThrowOnError>({
        url: '/api/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User
 */
export const deleteUserApiV1UsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserApiV1UsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserApiV1UsersUserIdDeleteResponse, DeleteUserApiV1UsersUserIdDeleteError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Get User
 */
export const getUserApiV1UsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserApiV1UsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserApiV1UsersUserIdGetResponse, GetUserApiV1UsersUserIdGetError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 */
export const updateUserApiV1UsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserApiV1UsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserApiV1UsersUserIdPutResponse, UpdateUserApiV1UsersUserIdPutError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Barbers
 */
export const getAllBarbersApiV1BarbersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllBarbersApiV1BarbersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllBarbersApiV1BarbersGetResponse, GetAllBarbersApiV1BarbersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/barbers',
        ...options
    });
};

/**
 * Create Barber
 */
export const createBarberApiV1BarbersPost = <ThrowOnError extends boolean = false>(options: Options<CreateBarberApiV1BarbersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBarberApiV1BarbersPostResponse, CreateBarberApiV1BarbersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/barbers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Barber By Id
 */
export const getBarberByIdApiV1BarbersBarberIdGet = <ThrowOnError extends boolean = false>(options: Options<GetBarberByIdApiV1BarbersBarberIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBarberByIdApiV1BarbersBarberIdGetResponse, GetBarberByIdApiV1BarbersBarberIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/barbers/{barber_id}',
        ...options
    });
};

/**
 * Get All Services
 */
export const registerUserAuthUsersPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserAuthUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RegisterUserAuthUsersPostError, ThrowOnError>({
        url: '/auth/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Root
 * Root endpoint that provides a welcome message and documentation link.
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Login
 * Login endpoint to authenticate the user and return an access token.
 *
 * Args:
 * username (str): The username of the user attempting to log in.
 * password (str): The password of the user.
 *
 * Returns:
 * TokenResponse: Contains the access token upon successful authentication.
 */
export const loginLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginLoginPostResponse, LoginLoginPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Protected Endpoint
 * Protected endpoint that requires a valid token for access.
 *
 * Args:
 * credentials (HTTPAuthorizationCredentials): Bearer token provided via HTTP Authorization header.
 *
 * Returns:
 * UserInfo: Information about the authenticated user.
 */
export const protectedEndpointProtectedGet = <ThrowOnError extends boolean = false>(options?: Options<ProtectedEndpointProtectedGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProtectedEndpointProtectedGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/protected',
        ...options
    });
};

/**
 * Barber Protected
 */
export const barberProtectedBarberProtectedGet = <ThrowOnError extends boolean = false>(options?: Options<BarberProtectedBarberProtectedGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BarberProtectedBarberProtectedGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/barber/protected',
        ...options
    });
};

/**
 * Root
 */
export const rootHealthzGet = <ThrowOnError extends boolean = false>(options?: Options<RootHealthzGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/healthz',
        ...options
    });
};