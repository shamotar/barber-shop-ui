// This file is auto-generated by @hey-api/openapi-ts

export type AppointmentCreate = {
    user_id: number;
    barber_id: number;
    schedule_id: number;
    status: AppointmentStatus;
};

export type AppointmentResponse = {
    appointment_id: number;
    user_id: number;
    barber_id: number;
    status: AppointmentStatus;
};

export type AppointmentStatus = 'pending' | 'confirmed' | 'completed' | 'cancelled';

export type AppointmentUpdate = {
    user_id?: number | null;
    barber_id?: number | null;
    schedule_id?: number | null;
    status?: AppointmentStatus | null;
};

export type BarberBase = {
    user_id: number;
};

export type BarberResponse = {
    user_id: number;
    barber_id: number;
};

export type BodyLoginLoginPost = {
    username: string;
    password: string;
};

export type ErrorResponse = {
    detail: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ScheduleCreate = {
    barber_id: number;
    appointment_id?: number | null;
    date: string;
    startTime: string;
    endTime: string;
};

export type ScheduleResponse = {
    barber_id: number;
    appointment_id?: number | null;
    date: string;
    startTime: string;
    endTime: string;
    schedule_id: number;
};

export type ScheduleUpdate = {
    barber_id?: number | null;
    appointment_id?: number | null;
    date?: string | null;
    startTime?: string | null;
    endTime?: string | null;
};

export type ServiceBase = {
    name: string;
    duration: string;
    price: number | string;
};

export type ServiceResponse = {
    name: string;
    duration: string;
    price: string;
    service_id: number;
};

export type ServiceUpdate = {
    name?: string | null;
    duration?: string | null;
    price?: number | string;
};

export type TokenResponse = {
    access_token: string;
    token_type?: string;
};

export type UserCreate = {
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    is_admin?: boolean;
    password: string;
};

export type UserInfo = {
    username: string;
    email: string;
    first_name: string;
    last_name: string;
    roles: Array<unknown>;
};

export type UserResponse = {
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    is_admin?: boolean;
    user_id: number;
};

export type UserUpdate = {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    is_admin?: boolean | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type GetUsersApiV1UsersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users';
};

export type GetUsersApiV1UsersGetErrors = {
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUsersApiV1UsersGetError = GetUsersApiV1UsersGetErrors[keyof GetUsersApiV1UsersGetErrors];

export type GetUsersApiV1UsersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserResponse>;
};

export type GetUsersApiV1UsersGetResponse = GetUsersApiV1UsersGetResponses[keyof GetUsersApiV1UsersGetResponses];

export type CreateUserApiV1UsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users';
};

export type CreateUserApiV1UsersPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateUserApiV1UsersPostError = CreateUserApiV1UsersPostErrors[keyof CreateUserApiV1UsersPostErrors];

export type CreateUserApiV1UsersPostResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type CreateUserApiV1UsersPostResponse = CreateUserApiV1UsersPostResponses[keyof CreateUserApiV1UsersPostResponses];

export type DeleteUserApiV1UsersUserIdDeleteData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type DeleteUserApiV1UsersUserIdDeleteErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteUserApiV1UsersUserIdDeleteError = DeleteUserApiV1UsersUserIdDeleteErrors[keyof DeleteUserApiV1UsersUserIdDeleteErrors];

export type DeleteUserApiV1UsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteUserApiV1UsersUserIdDeleteResponse = DeleteUserApiV1UsersUserIdDeleteResponses[keyof DeleteUserApiV1UsersUserIdDeleteResponses];

export type GetUserApiV1UsersUserIdGetData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type GetUserApiV1UsersUserIdGetErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUserApiV1UsersUserIdGetError = GetUserApiV1UsersUserIdGetErrors[keyof GetUserApiV1UsersUserIdGetErrors];

export type GetUserApiV1UsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type GetUserApiV1UsersUserIdGetResponse = GetUserApiV1UsersUserIdGetResponses[keyof GetUserApiV1UsersUserIdGetResponses];

export type UpdateUserApiV1UsersUserIdPutData = {
    body: UserUpdate;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UpdateUserApiV1UsersUserIdPutErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateUserApiV1UsersUserIdPutError = UpdateUserApiV1UsersUserIdPutErrors[keyof UpdateUserApiV1UsersUserIdPutErrors];

export type UpdateUserApiV1UsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type UpdateUserApiV1UsersUserIdPutResponse = UpdateUserApiV1UsersUserIdPutResponses[keyof UpdateUserApiV1UsersUserIdPutResponses];

export type RegisterUserAuthUsersPostData = {
    body: AuthAuthUserCreate;
    path?: never;
    query?: never;
    url: '/auth/users/';
};

export type RegisterUserAuthUsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type RegisterUserAuthUsersPostError = RegisterUserAuthUsersPostErrors[keyof RegisterUserAuthUsersPostErrors];

export type RegisterUserAuthUsersPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginLoginPostData = {
    body: BodyLoginLoginPost;
    path?: never;
    query?: never;
    url: '/login';
};

export type LoginLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginPostError = LoginLoginPostErrors[keyof LoginLoginPostErrors];

export type LoginLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type LoginLoginPostResponse = LoginLoginPostResponses[keyof LoginLoginPostResponses];

export type ProtectedEndpointProtectedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/protected';
};

export type ProtectedEndpointProtectedGetResponses = {
    /**
     * Successful Response
     */
    200: UserInfo;
};

export type ProtectedEndpointProtectedGetResponse = ProtectedEndpointProtectedGetResponses[keyof ProtectedEndpointProtectedGetResponses];

export type BarberProtectedBarberProtectedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/barber/protected';
};

export type BarberProtectedBarberProtectedGetResponses = {
    /**
     * Successful Response
     */
    200: UserInfo;
};

export type BarberProtectedBarberProtectedGetResponse = BarberProtectedBarberProtectedGetResponses[keyof BarberProtectedBarberProtectedGetResponses];

export type RootHealthzGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/healthz';
};

export type RootHealthzGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};